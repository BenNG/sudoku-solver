defmodule SudokuAlgo2Test do
  use ExUnit.Case, async: true
  import Sudoku.Algo2


  test "length values == 1 in map" do
    assert Sudoku.Algo2.filter_single_values(%{
      "aze" => [1,2,3],
      "qsd" => [1,2],
      "wxc" => [1]
      }) === %{
        "wxc" => [1]
      }
  end


  test "new values found" do

    new_map = %{
      {0,0} => [1],
      {1,0} => [1,2],
      {2,0} => [1,2,3,4,5,6,7,8,9],
      {3,0} => [1,2,3,4,5,6,7,8,9],
      {4,0} => [1,2,3],
      {5,0} => [1,2,3,5,6,7,8,9],
      {6,0} => [1,2,3,4,5,6,7,8,9],
      {7,0} => [1,2,3,4,5,6,7,8,9],
      {8,0} => [8],
    }

    old_map = %{
      {0,0} => [1],
      {1,0} => [1,2],
      {2,0} => [1,2,3,4,5,6,7,8,9],
      {3,0} => [1,2,3,4,5,6,7,8,9],
      {4,0} => [1,2,3],
      {5,0} => [1,2,3,5,6,7,8,9],
      {6,0} => [1,2,3,4,5,6,7,8,9],
      {7,0} => [1,2,3,4,5,6,7,8,9],
      {8,0} => [1,2,3,4,5,6,7,8,9],
    }

    assert Sudoku.Algo2.new_values_found(new_map, old_map) === %{
      {8,0} => [8],
    }

  end

  test "no new values found" do

    new_map = %{
      {0,0} => [1],
      {1,0} => [1,2],
      {2,0} => [1,2,3,4,5,6,7,8,9],
      {3,0} => [1,2,3,4,5,6,7,8,9],
      {4,0} => [1,2,3],
      {5,0} => [1,2,3,5,6,7,8,9],
      {6,0} => [1,2,3,4,5,6,7,8,9],
      {7,0} => [1,2,3,4,5,6,7,8,9],
      {8,0} => [8],
    }

    assert Sudoku.Algo2.new_values_found(new_map, new_map) === %{}

  end


  test "initial values" do
    map = Sudoku.Algo2.initial_posibilities_to_map
    assert map == %{
      {0,0} => [1,2,3,4,5,6,7,8,9],
      {1,0} => [1,2,3,4,5,6,7,8,9],
      {2,0} => [1,2,3,4,5,6,7,8,9],
      {3,0} => [1,2,3,4,5,6,7,8,9],
      {4,0} => [1,2,3,4,5,6,7,8,9],
      {5,0} => [1,2,3,4,5,6,7,8,9],
      {6,0} => [1,2,3,4,5,6,7,8,9],
      {7,0} => [1,2,3,4,5,6,7,8,9],
      {8,0} => [1,2,3,4,5,6,7,8,9],
      {0,1} => [1,2,3,4,5,6,7,8,9],
      {1,1} => [1,2,3,4,5,6,7,8,9],
      {2,1} => [1,2,3,4,5,6,7,8,9],
      {3,1} => [1,2,3,4,5,6,7,8,9],
      {4,1} => [1,2,3,4,5,6,7,8,9],
      {5,1} => [1,2,3,4,5,6,7,8,9],
      {6,1} => [1,2,3,4,5,6,7,8,9],
      {7,1} => [1,2,3,4,5,6,7,8,9],
      {8,1} => [1,2,3,4,5,6,7,8,9],
      {0,2} => [1,2,3,4,5,6,7,8,9],
      {1,2} => [1,2,3,4,5,6,7,8,9],
      {2,2} => [1,2,3,4,5,6,7,8,9],
      {3,2} => [1,2,3,4,5,6,7,8,9],
      {4,2} => [1,2,3,4,5,6,7,8,9],
      {5,2} => [1,2,3,4,5,6,7,8,9],
      {6,2} => [1,2,3,4,5,6,7,8,9],
      {7,2} => [1,2,3,4,5,6,7,8,9],
      {8,2} => [1,2,3,4,5,6,7,8,9],
      {0,3} => [1,2,3,4,5,6,7,8,9],
      {1,3} => [1,2,3,4,5,6,7,8,9],
      {2,3} => [1,2,3,4,5,6,7,8,9],
      {3,3} => [1,2,3,4,5,6,7,8,9],
      {4,3} => [1,2,3,4,5,6,7,8,9],
      {5,3} => [1,2,3,4,5,6,7,8,9],
      {6,3} => [1,2,3,4,5,6,7,8,9],
      {7,3} => [1,2,3,4,5,6,7,8,9],
      {8,3} => [1,2,3,4,5,6,7,8,9],
      {0,4} => [1,2,3,4,5,6,7,8,9],
      {1,4} => [1,2,3,4,5,6,7,8,9],
      {2,4} => [1,2,3,4,5,6,7,8,9],
      {3,4} => [1,2,3,4,5,6,7,8,9],
      {4,4} => [1,2,3,4,5,6,7,8,9],
      {5,4} => [1,2,3,4,5,6,7,8,9],
      {6,4} => [1,2,3,4,5,6,7,8,9],
      {7,4} => [1,2,3,4,5,6,7,8,9],
      {8,4} => [1,2,3,4,5,6,7,8,9],
      {0,5} => [1,2,3,4,5,6,7,8,9],
      {1,5} => [1,2,3,4,5,6,7,8,9],
      {2,5} => [1,2,3,4,5,6,7,8,9],
      {3,5} => [1,2,3,4,5,6,7,8,9],
      {4,5} => [1,2,3,4,5,6,7,8,9],
      {5,5} => [1,2,3,4,5,6,7,8,9],
      {6,5} => [1,2,3,4,5,6,7,8,9],
      {7,5} => [1,2,3,4,5,6,7,8,9],
      {8,5} => [1,2,3,4,5,6,7,8,9],
      {0,6} => [1,2,3,4,5,6,7,8,9],
      {1,6} => [1,2,3,4,5,6,7,8,9],
      {2,6} => [1,2,3,4,5,6,7,8,9],
      {3,6} => [1,2,3,4,5,6,7,8,9],
      {4,6} => [1,2,3,4,5,6,7,8,9],
      {5,6} => [1,2,3,4,5,6,7,8,9],
      {6,6} => [1,2,3,4,5,6,7,8,9],
      {7,6} => [1,2,3,4,5,6,7,8,9],
      {8,6} => [1,2,3,4,5,6,7,8,9],
      {0,7} => [1,2,3,4,5,6,7,8,9],
      {0,7} => [1,2,3,4,5,6,7,8,9],
      {1,7} => [1,2,3,4,5,6,7,8,9],
      {2,7} => [1,2,3,4,5,6,7,8,9],
      {3,7} => [1,2,3,4,5,6,7,8,9],
      {4,7} => [1,2,3,4,5,6,7,8,9],
      {5,7} => [1,2,3,4,5,6,7,8,9],
      {6,7} => [1,2,3,4,5,6,7,8,9],
      {7,7} => [1,2,3,4,5,6,7,8,9],
      {8,7} => [1,2,3,4,5,6,7,8,9],
      {0,8} => [1,2,3,4,5,6,7,8,9],
      {1,8} => [1,2,3,4,5,6,7,8,9],
      {2,8} => [1,2,3,4,5,6,7,8,9],
      {3,8} => [1,2,3,4,5,6,7,8,9],
      {4,8} => [1,2,3,4,5,6,7,8,9],
      {5,8} => [1,2,3,4,5,6,7,8,9],
      {6,8} => [1,2,3,4,5,6,7,8,9],
      {7,8} => [1,2,3,4,5,6,7,8,9],
      {8,8} => [1,2,3,4,5,6,7,8,9],
    }
  end

  # @tag :pending
  test "apply values" do
    raw = "003020600000000000000000000000000000000000000000000000000000000000000000000000000"
    raw_map = Sudoku.Algo1.create_built_in_values(raw)
    values = Sudoku.Algo2.initial_posibilities_to_map
    assert Sudoku.Algo2.apply_values(values, raw_map) == %{
      {0,0} => [1,4,5,7,8,9],
      {1,0} => [1,4,5,7,8,9],
      {2,0} => [3],
      {3,0} => [1,4,5,7,8,9],
      {4,0} => [2],
      {5,0} => [1,4,5,7,8,9],
      {6,0} => [6],
      {7,0} => [1,4,5,7,8,9],
      {8,0} => [1,4,5,7,8,9],
      {0,1} => [1,2,4,5,6,7,8,9],
      {1,1} => [1,2,4,5,6,7,8,9],
      {2,1} => [1,2,4,5,6,7,8,9],
      {3,1} => [1,3,4,5,6,7,8,9],
      {4,1} => [1,3,4,5,6,7,8,9],
      {5,1} => [1,3,4,5,6,7,8,9],
      {6,1} => [1,2,3,4,5,7,8,9],
      {7,1} => [1,2,3,4,5,7,8,9],
      {8,1} => [1,2,3,4,5,7,8,9],
      {0,2} => [1,2,4,5,6,7,8,9],
      {1,2} => [1,2,4,5,6,7,8,9],
      {2,2} => [1,2,4,5,6,7,8,9],
      {3,2} => [1,3,4,5,6,7,8,9],
      {4,2} => [1,3,4,5,6,7,8,9],
      {5,2} => [1,3,4,5,6,7,8,9],
      {6,2} => [1,2,3,4,5,7,8,9],
      {7,2} => [1,2,3,4,5,7,8,9],
      {8,2} => [1,2,3,4,5,7,8,9],
      {0,3} => [1,2,3,4,5,6,7,8,9],
      {1,3} => [1,2,3,4,5,6,7,8,9],
      {2,3} => [1,2,4,5,6,7,8,9],
      {3,3} => [1,2,3,4,5,6,7,8,9],
      {4,3} => [1,3,4,5,6,7,8,9],
      {5,3} => [1,2,3,4,5,6,7,8,9],
      {6,3} => [1,2,3,4,5,7,8,9],
      {7,3} => [1,2,3,4,5,6,7,8,9],
      {8,3} => [1,2,3,4,5,6,7,8,9],
      {0,4} => [1,2,3,4,5,6,7,8,9],
      {1,4} => [1,2,3,4,5,6,7,8,9],
      {2,4} => [1,2,4,5,6,7,8,9],
      {3,4} => [1,2,3,4,5,6,7,8,9],
      {4,4} => [1,3,4,5,6,7,8,9],
      {5,4} => [1,2,3,4,5,6,7,8,9],
      {6,4} => [1,2,3,4,5,7,8,9],
      {7,4} => [1,2,3,4,5,6,7,8,9],
      {8,4} => [1,2,3,4,5,6,7,8,9],
      {0,5} => [1,2,3,4,5,6,7,8,9],
      {1,5} => [1,2,3,4,5,6,7,8,9],
      {2,5} => [1,2,4,5,6,7,8,9],
      {3,5} => [1,2,3,4,5,6,7,8,9],
      {4,5} => [1,3,4,5,6,7,8,9],
      {5,5} => [1,2,3,4,5,6,7,8,9],
      {6,5} => [1,2,3,4,5,7,8,9],
      {7,5} => [1,2,3,4,5,6,7,8,9],
      {8,5} => [1,2,3,4,5,6,7,8,9],
      {0,6} => [1,2,3,4,5,6,7,8,9],
      {1,6} => [1,2,3,4,5,6,7,8,9],
      {2,6} => [1,2,4,5,6,7,8,9],
      {3,6} => [1,2,3,4,5,6,7,8,9],
      {4,6} => [1,3,4,5,6,7,8,9],
      {5,6} => [1,2,3,4,5,6,7,8,9],
      {6,6} => [1,2,3,4,5,7,8,9],
      {7,6} => [1,2,3,4,5,6,7,8,9],
      {8,6} => [1,2,3,4,5,6,7,8,9],
      {0,7} => [1,2,3,4,5,6,7,8,9],
      {1,7} => [1,2,3,4,5,6,7,8,9],
      {2,7} => [1,2,4,5,6,7,8,9],
      {3,7} => [1,2,3,4,5,6,7,8,9],
      {4,7} => [1,3,4,5,6,7,8,9],
      {5,7} => [1,2,3,4,5,6,7,8,9],
      {6,7} => [1,2,3,4,5,7,8,9],
      {7,7} => [1,2,3,4,5,6,7,8,9],
      {8,7} => [1,2,3,4,5,6,7,8,9],
      {0,8} => [1,2,3,4,5,6,7,8,9],
      {1,8} => [1,2,3,4,5,6,7,8,9],
      {2,8} => [1,2,4,5,6,7,8,9],
      {3,8} => [1,2,3,4,5,6,7,8,9],
      {4,8} => [1,3,4,5,6,7,8,9],
      {5,8} => [1,2,3,4,5,6,7,8,9],
      {6,8} => [1,2,3,4,5,7,8,9],
      {7,8} => [1,2,3,4,5,6,7,8,9],
      {8,8} => [1,2,3,4,5,6,7,8,9],
    }
  end

  @tag :pending
  test "an other strategy" do
    raw = "200080300060070084030500209000105408000000000402706000301007040720040060004010003"
    Sudoku.Algo2.run(raw, true)
    blocked_map = %{{3, 3} => [1], {7, 6} => [4], {7, 8} => [2, 5, 7, 9], {4, 0} => '\b',
  {2, 1} => [5, 9], {2, 2} => '\a\b', {6, 4} => [1, 5, 6, 7, 9], {0, 0} => [2],
  {2, 0} => [5, 7, 9], {6, 3} => [4], {5, 7} => [3, 8, 9],
  {8, 0} => [1, 5, 6, 7], {6, 1} => [1, 5], {0, 2} => [1, 8], {4, 5} => [3, 9],
  {7, 0} => [1, 5, 7], {2, 7} => [5, 8, 9], {5, 1} => [1, 2, 3, 9],
  {0, 7} => '\a', {7, 1} => '\b', {8, 7} => [1, 5], {3, 1} => [2, 3, 9],
  {5, 6} => '\a', {6, 2} => [2], {8, 2} => '\t', {1, 3} => '\a\t',
  {6, 8} => [5, 7, 8, 9], {1, 8} => [5, 8, 9], {5, 4} => [2, 3, 4, 8, 9],
  {7, 4} => [1, 2, 3, 5, 7, 9], {3, 5} => '\a', {7, 2} => [1, 7],
  {0, 3} => [6, 9], {2, 8} => [4], {1, 0} => [1, 4, 5, 7, 9],
  {7, 5} => [1, 3, 5, 9], {7, 7} => [6], {3, 4} => [2, 3, 4, 8, 9],
  {4, 7} => [4], {1, 5} => [1, 5, 8, 9], {5, 8} => [2, 8, 9], {3, 0} => [4, 9],
  {3, 7} => [3, 8, 9], {4, 1} => '\a', {5, 2} => [1, 4],
  {2, 4} => [3, 5, 6, 7, 8, 9], {1, 2} => [3], {1, 4} => [1, 5, 7, 8, 9],
  {6, 7} => [1, 5, 8, 9], {4, 2} => [6], {3, 6} => [2, 6, 8, 9],
  {1, 6} => [5, 8, 9], {8, 8} => [3], {2, 3} => [3, 6, 7, 9], {8, 1} => [4],
  {8, 4} => [1, 2, 5, 6, 7], {5, 3} => [5], {1, 7} => [2], {0, 6} => [3],
  {2, 6} => [1], {8, 5} => [1, 5], {6, 6} => [5, 8, 9], {6, 0} => [3],
  {3, 8} => [2, 6, 8, 9], {6, 5} => [1, 5, 9], {5, 5} => [6], {1, 1} => [6],
  {8, 6} => [2, 5], {3, 2} => [5], {4, 6} => [2, 5, 9], {0, 8} => [5, 6, 8, 9],
  {4, 3} => [2, 3, 9], {2, 5} => [2], {0, 5} => [4], {8, 3} => '\b',
  {0, 4} => [1, 5, 6, 8, 9], {4, 4} => [2, 3, 9], {4, 8} => [1],
  {5, 0} => [1, 4, 9], {0, 1} => [1, 5, 9], {7, 3} => [2, 3, 7, 9]}

  assert Sudoku.Algo2.isolated_values(blocked_map) == []

  end

  test "resove simple sudoku" do
    raw = "003020600900305001001806400008102900700000008006708200002609500800203009005010300"
    answer = "483921657967345821251876493548132976729564138136798245372689514814253769695417382"
    assert Sudoku.Algo2.run(raw) == {:ok, answer}
  end

  test "resove harder sudoku" do
    raw = "200080300060070084030500209000105408000000000402706000301007040720040060004010003"
    answer = "483921657967345821251876493548132976729564138136798245372689514814253769695417382"
    assert Sudoku.Algo2.run(raw) == {:ok, answer}
  end

end
