defmodule SudokuNakedSingleTest do
  use ExUnit.Case, async: true

  # @tag :pending
  test "no naked single" do
    assert Sudoku.Strategies.NakedSingle.run(Sudoku.Board.init) === Sudoku.Board.init
  end

  # @tag :pending
  test "naked single row" do
    map = Map.merge(Sudoku.Board.init,
        %{
          {4, 8} => '\b',
          {0, 8} => [2],
          {2, 8} => [5, 7, 9],
          {8, 8} => [1, 5, 6, 7],
          {7, 8} => [1, 5, 7],
          {1, 8} => [1, 4, 5, 7, 9],
          {3, 8} => [4, 9],
          {6, 8} => [3],
          {5, 8} => [1, 4, 9],
        })

    assert Sudoku.Strategies.NakedSingle.do_run(map) == %{ {8, 8} => 6}
  end

  # @tag :pending
  test "naked single recursively" do
    map = Map.merge(Sudoku.Board.init,
        %{
          {4, 8} => '\b',
          {0, 8} => [2],
          {2, 8} => [5, 7, 9],
          {8, 8} => [1, 5, 6, 7],
          {7, 8} => [1, 5, 7],
          {1, 8} => [1, 4, 5, 7, 9],
          {3, 8} => [4, 9],
          {6, 8} => [3],
          {5, 8} => [1, 4, 9],
        })

    map = Sudoku.Strategies.NakedSingle.run(map)

    result = Map.merge(Sudoku.Board.init,
      %{
        {8, 4} => [1,2,3,4,5,7,8,9],
        {8, 0} => [1,2,3,4,5,7,8,9],
        {8, 2} => [1,2,3,4,5,7,8,9],
        {8, 8} => [1,2,3,4,5,7,8,9],
        {8, 7} => [1,2,3,4,5,7,8,9],
        {8, 1} => [1,2,3,4,5,7,8,9],
        {8, 3} => [1,2,3,4,5,7,8,9],
        {8, 6} => [1,2,3,4,5,7,8,9],
        {8, 5} => [1,2,3,4,5,7,8,9],

        {6, 6} => [1,2,3,4,5,7,8,9],
        {6, 7} => [1,2,3,4,5,7,8,9],
        {6, 8} => [1,2,3,4,5,7,8,9],
        {7, 6} => [1,2,3,4,5,7,8,9],
        {7, 7} => [1,2,3,4,5,7,8,9],
        {7, 8} => [1,2,3,4,5,7,8,9],
        {8, 6} => [1,2,3,4,5,7,8,9],
        {8, 7} => [1,2,3,4,5,7,8,9],

        {4, 8} => '\b',
        {0, 8} => [2],
        {2, 8} => [5, 7, 9],
        {8, 8} => [6],
        {7, 8} => [1, 5, 7],
        {1, 8} => [1, 4, 5, 7, 9],
        {3, 8} => [4, 9],
        {6, 8} => [3],
        {5, 8} => [1, 4, 9],
      })
    assert map == result
  end

  # @tag :pending
  test "naked single col" do
    map = Map.merge(Sudoku.Board.init,
        %{
          {1, 3} => '\a\t',
          {1, 8} => [5, 8, 9],
          {1, 0} => [1, 4, 5, 7, 9],
          {1, 5} => [1, 5, 8, 9],
          {1, 2} => [3],
          {1, 4} => [1, 5, 7, 8, 9],
          {1, 6} => [5, 8, 9],
          {1, 7} => [2],
          {1, 1} => [6],
        })
    assert Sudoku.Strategies.NakedSingle.do_run(map) == %{ {1, 0} => 4}
  end

  # @tag :pending
  test "naked single box" do
    map = Map.merge(Sudoku.Board.init,
    %{
      {0,6} => [3],
      {1,6} => [5,8,9],
      {2,6} => [1],
      {0,7} => [7],
      {1,7} => [2],
      {2,7} => [5,8,9],
      {0,8} => [5,6,8,9],
      {1,8} => [5,8,9],
      {2,8} => [4],
    })
    assert Sudoku.Strategies.NakedSingle.do_run(map) == %{ {0, 8} => 6}
  end

  # @tag :pending
  test "naked single all" do
    map = Map.merge(Sudoku.Board.init,
    %{
      {4, 0} => '\b',
      {0, 0} => [2],
      {2, 0} => [5, 7, 9],
      {8, 0} => [1, 5, 6, 7],
      {7, 0} => [1, 5, 7],
      {1, 0} => [1, 4, 5, 7, 9],
      {3, 0} => [4, 9],
      {6, 0} => [3],
      {5, 0} => [1, 4, 9],
      {1, 3} => '\a\t',
      {1, 8} => [5, 8, 9],
      {1, 0} => [1, 4, 5, 7, 9],
      {1, 5} => [1, 5, 8, 9],
      {1, 2} => [3],
      {1, 4} => [1, 5, 7, 8, 9],
      {1, 6} => [5, 8, 9],
      {1, 7} => [2],
      {1, 1} => [6],
      {0, 6} => [3],
      {1, 6} => [5,8,9],
      {2, 6} => [1],
      {0, 7} => [7],
      {1, 7} => [2],
      {2, 7} => [5,8,9],
      {0, 8} => [5,6,8,9],
      {1, 8} => [5,8,9],
      {2, 8} => [4],
    })
    assert Sudoku.Strategies.NakedSingle.do_run(map) ==
      %{ {0, 8} => 6, {1, 0} => 4, {8, 0} => 6 }
  end

  # @tag :pending
  test "naked single" do
    blocked_map =
      %{
          {3, 3} => [1],
          {7, 6} => [4],
          {7, 8} => [2, 5, 7, 9],
          {4, 0} => '\b',
          {2, 1} => [5, 9],
          {2, 2} => '\a\b',
          {6, 4} => [1, 5, 6, 7, 9],
          {0, 0} => [2],
          {2, 0} => [5, 7, 9],
          {6, 3} => [4],
          {5, 7} => [3, 8, 9],
          {8, 0} => [1, 5, 6, 7],
          {6, 1} => [1, 5],
          {0, 2} => [1, 8],
          {4, 5} => [3, 9],
          {7, 0} => [1, 5, 7],
          {2, 7} => [5, 8, 9],
          {5, 1} => [1, 2, 3, 9],
          {0, 7} => '\a',
          {7, 1} => '\b',
          {8, 7} => [1, 5],
          {3, 1} => [2, 3, 9],
          {5, 6} => '\a',
          {6, 2} => [2],
          {8, 2} => '\t',
          {1, 3} => '\a\t',
          {6, 8} => [5, 7, 8, 9],
          {1, 8} => [5, 8, 9],
          {5, 4} => [2, 3, 4, 8, 9],
          {7, 4} => [1, 2, 3, 5, 7, 9],
          {3, 5} => '\a',
          {7, 2} => [1, 7],
          {0, 3} => [6, 9],
          {2, 8} => [4],
          {1, 0} => [1, 4, 5, 7, 9],
          {7, 5} => [1, 3, 5, 9],
          {7, 7} => [6],
          {3, 4} => [2, 3, 4, 8, 9],
          {4, 7} => [4],
          {1, 5} => [1, 5, 8, 9],
          {5, 8} => [2, 8, 9],
          {3, 0} => [4, 9],
          {3, 7} => [3, 8, 9],
          {4, 1} => '\a',
          {5, 2} => [1, 4],
          {2, 4} => [3, 5, 6, 7, 8, 9],
          {1, 2} => [3],
          {1, 4} => [1, 5, 7, 8, 9],
          {6, 7} => [1, 5, 8, 9],
          {4, 2} => [6],
          {3, 6} => [2, 6, 8, 9],
          {1, 6} => [5, 8, 9],
          {8, 8} => [3],
          {2, 3} => [3, 6, 7, 9],
          {8, 1} => [4],
          {8, 4} => [1, 2, 5, 6, 7],
          {5, 3} => [5],
          {1, 7} => [2],
          {0, 6} => [3],
          {2, 6} => [1],
          {8, 5} => [1, 5],
          {6, 6} => [5, 8, 9],
          {6, 0} => [3],
          {3, 8} => [2, 6, 8, 9],
          {6, 5} => [1, 5, 9],
          {5, 5} => [6],
          {1, 1} => [6],
          {8, 6} => [2, 5],
          {3, 2} => [5],
          {4, 6} => [2, 5, 9],
          {0, 8} => [5, 6, 8, 9],
          {4, 3} => [2, 3, 9],
          {2, 5} => [2],
          {0, 5} => [4],
          {8, 3} => '\b',
          {0, 4} => [1, 5, 6, 8, 9],
          {4, 4} => [2, 3, 9],
          {4, 8} => [1],
          {5, 0} => [1, 4, 9],
          {0, 1} => [1, 5, 9],
          {7, 3} => [2, 3, 7, 9]
      }

  assert Sudoku.Strategies.NakedSingle.do_run(blocked_map) == %{{0, 8} => 6, {1, 0} => 4, {1, 5} => 8, {3, 6} => 6, {4, 6} => 5, {5, 2} => 4, {6, 4} => 6, {8, 0} => 6}

  end
end
